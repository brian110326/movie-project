name: Deploy MOVIE MSA to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 설치
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 4. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5. 서비스별 Maven 빌드 + Docker 이미지 빌드 & Push
      - name: Build & Push configure-service
        run: |
          cd configure-service
          mvn clean package -DskipTests
          docker build -t configure-service .
          docker tag configure-service ${{steps.login-ecr.outputs.registry}}/configure-service:1.0
          docker push ${{steps.login-ecr.outputs.registry}}/configure-service:1.0


      - name: Build & Push service-discovery
        run: |
          cd service-discovery
          mvn clean package -DskipTests
          docker build -t service-discovery .
          docker tag service-discovery:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/service-discovery:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/service-discovery:1.0

      - name: Build & Push apigateway-service
        run: |
          cd apigateway-service
          mvn clean package -DskipTests
          docker build -t apigateway-service .
          docker tag apigateway-service:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/apigateway-service:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/apigateway-service:1.0

      - name: Build & Push movie-service
        run: |
          cd movie-service
          mvn clean package -DskipTests
          docker build -t movie-service .
          docker tag movie-service:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/movie-service:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/movie-service:1.0

      - name: Build & Push book-service
        run: |
          cd book-service
          mvn clean package -DskipTests
          docker build -t book-service .
          docker tag book-service:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/book-service:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/book-service:1.0

      - name: Build & Push payment-service
        run: |
          cd payment-service
          mvn clean package -DskipTests
          docker build -t payment-service .
          docker tag payment-service:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/payment-service:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/payment-service:1.0

      - name: Build & Push seat-service
        run: |
          cd seat-service
          mvn clean package -DskipTests
          docker build -t seat-service .
          docker tag seat-service:latest 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/seat-service:1.0
          docker push 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/seat-service:1.0

      # 6. EC2로 Compose 파일 전송
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/movie-project/docker-compose.yml"

      # 7. EC2에서 Compose 실행
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/movie-project
            docker-compose down
            docker-compose pull
            docker-compose up -d
