version: '3.9'

services:

  db:
    image: mariadb:10.4
    environment:
      MYSQL_ROOT_PASSWORD: brian981103
      MYSQL_DATABASE: movieDB
      MYSQL_USER: root
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 10

  kafka:
    image: bitnami/kafka:3.4.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_PROCESS_ROLES=broker,controller # Kafka 브로커와 컨트롤러 역할 동시 수행
      - KAFKA_CFG_NODE_ID=0 # 노드 ID 지정 (클러스터 환경에서는 각 노드에 고유한 ID 할당)
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093 # Controller 구성 (KRaft 모드)
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092 # 외부에서 접속할 수 있도록 설정
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://43.200.169.229:9092 # 클라이언트가 연결할 주소
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes: # 데이터 영속성을 위해 볼륨 마운트 (권장)
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    ports:
      - "8083:8083"   # 기본 Kafka Connect REST API 포트
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: 0.0.0.0
    depends_on:
      - kafka

  configure-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/configure-service:1.0
    ports:
      - "8888:8888"

  service-discovery:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/service-discovery:1.0
    environment:
      - SERVER_PORT=8761
      - SPRING_APPLICATION_NAME=service-discovery
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info
      - MANAGEMENT_METRICS_ENABLE_ALL=false
      - MANAGEMENT_METRICS_BINDERS_SYSTEM=false
      - MANAGEMENT_METRICS_BINDERS_JVM=false
      - MANAGEMENT_METRICS_BINDERS_PROCESSOR=false
      - MANAGEMENT_METRICS_BINDERS_DISKSPACE=false
    ports:
      - "8761:8761"

  apigateway-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/apigateway-service:1.0
    depends_on:
      - service-discovery
      - configure-service
    ports:
      - "8000:8000"

  user-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:1.0
    depends_on:
      - service-discovery
      - configure-service
      - apigateway-service
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8081:8081"

  schedule-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/schedule-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8084:8084"


  theater-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/theater-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8082:8082"

  movie-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/movie-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8086:8086"

  book-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/book-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8087:8087"

  payment-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/payment-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8085:8085"

  seat-service:
    image: 139144002104.dkr.ecr.ap-northeast-2.amazonaws.com/seat-service:1.0
    depends_on:
      - service-discovery
      - apigateway-service
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/movieDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: brian981103
    ports:
      - "8089:8089"

volumes:
  db_data:
  kafka_data:
    driver: local
